#lang racket

;;; ---LAMBDA CALCULUS---

;;; Converting to console output
(define convertCurchBool
  (lambda (bool)
    ((bool #t) #f)))

(define convertChurchNumeral
  (lambda(churchNum)
    ((churchNum (lambda(x) (+ x 1))) 0)))

(define convertChurchList
  (lambda (lat)
    (cond
      ((convertCurchBool (NIL? lat)) '())
      (#t (cons (convertChurchNumeral (FIRST lat)) (convertChurchList (SECOND lat)))))))

(define convertChurchPair
  (lambda (p)
    (cons (convertChurchNumeral (FIRST p)) (convertChurchNumeral (SECOND p)))))

(define convertSignedChurchNumeral
  (lambda(churchNum)
    (- (convertChurchNumeral (FIRST churchNum)) (convertChurchNumeral (SECOND churchNum)))))

(define convertChurchRational
  (lambda(num)
    (/ (convertSignedChurchNumeral (FIRST num)) (convertSignedChurchNumeral (SECOND num)))))

;;;COMBINATORS

;;; Identity 
;;; λa.a
(define I 
  (lambda (a)
    a))

;;; Mockingbird (self application)
;;; λf.ff
(define M
  (lambda (f)
    (f f)))

;;; Kestral
;;; λab.a
(define K
  (lambda (a)
    (lambda (b)
      a)))

;;; Kite
;;; λab.b
;;; also λab.KIab
;;; also λab.CKab 
(define KI
  (lambda (a)
    (lambda (b)
      b)))

;;; Cardinal
;;; λfab.fba
(define C
  (lambda (f)
    (lambda (a)
      (lambda (b)
        ((f b) a)))))

;;; Virio
;;; λxyf.fxy
;;; pair function, cons in scheme
(define V
  (lambda (x)
    (lambda (y)
      (lambda (f)
        ((f x) y)))))

;;;BOOLEANS

;;; T
;;; λab.a
(define T K)

;;; F
;;; λab.b
(define F KI)

;;; Not
;;; λp.pFT
;;; also λp.Cp
(define NOT
  (lambda (p)
    ((p F) T)))

;;; And
;;; λpq.pqp
(define AND
  (lambda (p)
    (lambda (q)
      ((p q) p))))
;;; Or
;;; λpq.ppq
(define ORE
  (lambda (p)
    (lambda (q)
      ((p p) q))))

;;; boolean equality
;;; λpq.pq(not q)
(define BEQ
  (lambda (p)
    (lambda (q)
      ((p q) (NOT q)))))

;;; if true else
;;; λpfg.pfg
;;; literally just identity, but packages an if, else kinda nicely
(define IFELSE
  (lambda (p)
    (lambda (f)
      (lambda (g)
        ((p f) g)))))

;;; check if zero
;;; λn.n(λx.F)T
;;; if n is 0 "λx.F" will be run 0 times, and T will be returned
(define ZERO?
  (lambda (n)
    ((n (lambda(x) F)) T)))

;;; NATURAL NUMBERS

;;; zero
;;; λfx.x
(define ZERO
  (lambda (f)
    (lambda (x)
      x)))

;;; one
;;; λfx.fx
(define ONE
  (lambda (f)
    (lambda (x)
      (f x))))

;;; two
;;; λfx.f(fx)
(define TWO
  (lambda (f)
    (lambda (x)
      (f (f x)))))

;;; three
;;; λfx.f(f(fx))
(define THREE
  (lambda (f)
    (lambda (x)
      (f (f (f x))))))

;;; four
;;; λfx.f(f(f(fx)))
(define FOUR
  (lambda (f)
    (lambda (x)
      (f (f (f (f x)))))))

;;; numbers are just repeated application of f on x

;;; ARITHMETIC

;;; succ
;;; λnfx.f(nfx)
;;; simply wrap n in another f (have to give n it's f and x as well)
(define SUCC
  (lambda (n)
    (lambda (f)
      (lambda (x)
        (f ((n f) x))))))

;;; plus
;;; λmn.mSUCCn
;;; apply SUCC (+1) to n m times
(define PLUS
  (lambda (m)
    (lambda (n)
      ((m SUCC) n))))

;;; mult
;;; λmn.m(λn.PLUSn)ZERO
;;; apply PLUSn to 0 m times
(define MULT
  (lambda (m)
    (lambda (n)
      ((m (PLUS n)) ZERO))))

;;; pow
;;; λbe.eb
(define POW
  (lambda (b)
    (lambda (e)
      (e b))))


;;; PAIRS AND LISTS

(define PAIR V)

;;; first
;;; λp.pK
;;; car in scheme
(define FIRST
  (lambda (p)
    (p K)))

;;; second
;;; λp.pKI
;;; cdr in scheme
(define SECOND
  (lambda (p)
    (p KI)))

;;; empty list/null value 
;;; λx.T
;;; start building lists off of nil
(define NIL
  (lambda (x)
    T))

;;; test if a pair (or list) is NIL
;;; λp.p(λxy.F)
;;; if its an actuall pair it will return false
;;; if its NIL it will just return true
(define NIL?
  (lambda (p)
    (p (lambda (x) (lambda (y) F)))))


;;; left shift and increment pair
;;; λp.V(SECOND p)(SUCC SECOND p)
;;; basis for subtraction
(define Φ
  (lambda (p)
    ((PAIR (SECOND p)) (SUCC (SECOND p)))))

;;; predecessor function (-1 function)
;;; λn.FIRST(nΦ(PAIR ZERO ZERO))
;;; basically increments from 0 n times, but stores the previous number, at the end you can check this number as it will be 1 less than n
(define PRED
  (lambda (n)
    (FIRST ((n Φ) ((PAIR ZERO) ZERO)))))

;;; subtraction
;;; λmn.mPREDn
;;; take the predecessor of n m times
(define SUB
  (lambda (m)
    (lambda (n)
      ((n PRED) m))))

;;; Would (probably) work if we had lazy evaluation
;;; because (x x) wants to evaluate itself right away so we go infinite loop
;;;(define Y 
;;;  (lambda (f)
;;;    ((lambda (x) (f (x x)) (lambda (x) (f (x x)))))))

;;; just delay execution of (x x) by wraping it in a lambda

;;; takes (Y a) and gives (a (Y a))
;;; gives you a function that you can use
;;; you can pass other stuff to a - call a (Y a) x y
;;; and use x and y as arguments
;;; when you want another one to recurse with just call (Y a) again
;;; (inside a) and pass it the new arguments
(define Y 
  (lambda (f)
    (M (lambda (x) (f (lambda () (x x)))))))


;;; Not-quite-recursive functions that can be Y combinator-inated

;;; again, wrap things in lambdas so that we can lazily evaluate
(define dissociativeAdd
  (lambda (f)
    (lambda (x)
      (lambda (y)
        ((((ZERO? y) (lambda () x)) (lambda () (((f) (SUCC x)) (PRED y)))))))))

(define dissociativeFactorial
  (lambda (f)
    (lambda (x)
        ((((ZERO? x) (lambda () ONE)) (lambda () ((MULT x) ((f) (PRED x)))))))))

(define dissociativeListCount
  (lambda (f)
    (lambda (lat)
        ((((NIL? lat) (lambda () ZERO)) (lambda () (SUCC ((f) (SECOND lat)))))))))

(define dissociativeListAdd
  (lambda (f)
    (lambda (lat)
        ((((NIL? lat) (lambda () ZERO)) (lambda () ((PLUS (FIRST lat)) ((f) (SECOND lat)))))))))

(define dissociativeFib
  (lambda (f)
    (lambda (x)
        ((((ZERO? x) (lambda () ONE))
         (((ZERO? (PRED x)) (lambda () ONE))
           (lambda () ((PLUS ((f) (PRED x))) ((f) (PRED (PRED x)))))))))))

(define dissociativeFibList
  (lambda (f)
    (lambda (x)
      ((((ZERO? x) (lambda () ((V ONE) NIL))) (lambda () ((V ((Y dissociativeFib) x)) ((f) (PRED x)))))))))

(define dissociativeFibListList
  (lambda (f)
    (lambda (x)
      (lambda (y)
        (display (convertChurchNumeral x))
        (time (display(convertChurchList ((Y dissociativeFibList) x))))
        ;(newline)
        ((((ZERO? ((SUB x) y )) (lambda () (newline))) (lambda () (((f) (PRED x)) y))))))))


;(let ((TWENTY ((PLUS ((MULT FOUR) FOUR)) FOUR)) (THIRTY ((MULT ((MULT (SUCC FOUR)) TWO)) THREE)))
;  (((Y dissociativeFibListList) (SUCC THIRTY)) TWENTY)
;  )
;(newline)


;(newline)
;(display (convertChurchNumeral (((Y dissociativeAdd) ((PLUS FOUR) TWO)) TWO)))
;(newline)
;(display (convertChurchNumeral ((Y dissociativeFactorial) FOUR)))
;(newline)
;(display (convertChurchNumeral ((Y dissociativeListAdd) ((PAIR THREE) (
;                      (PAIR FOUR) (
;                        (PAIR FOUR) (
;                          (PAIR TWO) NIL)))))))
;(newline)
;(display (convertChurchNumeral ((Y dissociativeListCount) ((PAIR THREE) (
;                      (PAIR FOUR) (
;                        (PAIR FOUR) (
;                          (PAIR TWO) NIL)))))))
;(newline)

;(display (convertChurchList ((PAIR THREE) (
;                      (PAIR FOUR) (
;                        (PAIR FOUR) (
;                          (PAIR TWO) NIL))))))
;(newline)

;;; SIGNED NUMBERS
;;; represented as a pair where the first number is positive and the second is negative
;;; signed arithmetic operations followd by an "s"
(define CONVERTs
  (lambda (x)
    ((V x) ZERO)))

(define NEGs
  (lambda (x)
    ((V (SECOND x)) (FIRST x))))

;;; can use booleans as if else statements
;;; simplify a signed pair so that there is one zero 
(define dissociativeSimplify
  (lambda (f)
    (lambda (x)
        (((ZERO? (FIRST x)) 
          x) 
          ((((ZERO? (SECOND x)) 
          (lambda () x))
          (lambda () ((f) ((V (PRED (FIRST x))) (PRED (SECOND x)))))))))))

(define dissociativeSimplify2
  (lambda (f)
    (lambda (x)
        (((((ORE (ZERO? (FIRST x))) (ZERO? (SECOND x)))
          (lambda () x))
          (lambda () ((f) ((V (PRED (FIRST x))) (PRED (SECOND x))))))))))


(define SIMPLIFYs (Y dissociativeSimplify2))

;;; signed plus is the same as just adding like parts of the  
;;; pairs and simplifying
(define PLUSs
  (lambda (x)
    (lambda (y)
      (SIMPLIFYs ((V ((PLUS (FIRST x)) (FIRST y))) ((PLUS (SECOND x)) (SECOND y)))))))

;;; subtraction is adding the different parts of the pairs
;;; because subtraction of a negative is addition
(define SUBs
  (lambda (x)
    (lambda (y)
      (SIMPLIFYs ((V ((PLUS (FIRST x)) (SECOND y))) ((PLUS (SECOND x)) (FIRST y)))))))

;(display (convertSignedChurchNumeral ((SUBs ((V THREE) ZERO)) ((V (SUCC FOUR)) ZERO))))


;;; LET EXPRESSIONS

;((lambda (add1) 
;((lambda (sub1)
;((lambda (sub)
;((lambda (add)
 ;;;     (add 6 7)
; )
;(lambda (x y) (+ x y))))
;(lambda (x y) (- x y))))
;(lambda (x) (- x 1))))
;(lambda (x) (+ x 1)))
(define ONEs
  (CONVERTs ONE))

(define TWOs
  (CONVERTs TWO))

(define THREEs
  (CONVERTs THREE))

(define FOURs
  (CONVERTs FOUR))


(define CONVERTr
  (lambda (x)
    ((V x) ONEs)))

(define INVr
  (lambda (x)
    ((V (SECOND x)) (FIRST x))))

(define FRACr
  (lambda (x)
    (lambda (y)
      ((PAIR x) y)))) 


(convertChurchRational ((FRACr FOURs) THREEs))

